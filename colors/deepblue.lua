---@diagnostic disable: undefined-global
local colors_name = "deepblue"
vim.g.colors_name = colors_name

local lush = require "lush"
package.loaded["config.palette"] = nil
local c = require "config.palette"

local win = { sa = 2, li = 3 }
local menu = { sa = 8, li = 4 }

local theme = lush(function(injected_functions)
  local sym = injected_functions.sym

  return {
    Normal { bg = c.bg, fg = c.fg },
    NormalNC { Normal },
    EndOfBuffer { bg = c.bg, fg = c.bg },
    Visual { bg = c.bg.li(5).sa(5).ro(-5) },
    VisualNOS { Visual, sp = Visual.bg.li(40), underline = true },

    LineNr { fg = c.fg.da(40).sa(5) },
    LineNrAbove { LineNr },
    LineNrBelow { LineNr },
    CursorLine { bg = c.bg.li(2).sa(4).ro(-5) },
    CursorLineNr { fg = LineNr.fg.li(10), bold = true },
    CursorColumn { CursorLine },

    Folded { bg = CursorLine.bg.li(5).sa(5), fg = c.fg.da(10).sa(5) },
    FoldColumn { fg = Folded.fg.li(25) },
    CursorLineFold {},

    SignColumn { bg = LineNr.bg },
    CursorLineSign {},

    ModeMsg { fg = c.fg.li(20).sa(5), bold = true },
    MsgArea { bg = c.bg.da(50), fg = c.fg.li(10).sa(10) },

    WinSeparator { fg = c.bg.li(10) },
    MsgSeparator { bg = WinSeparator.fg, fg = WinSeparator.fg },

    NormalFloat { bg = c.bg.li(win.li).sa(win.sa), fg = c.fg.li(win.li / 4) },
    FloatBorder { NormalFloat, fg = WinSeparator.fg.li(win.li * 2) },
    FloatTitle { NormalFloat, fg = c.fg.li(10 + win.li / 2).sa(win.sa + 10).mix(c.b, 70), bold = true },
    FloatFooter { NormalFloat, fg = c.fg.li(5 + win.li / 4).sa(win.sa + 5) },
    FloatEndOfBuffer { bg = NormalFloat.bg, fg = NormalFloat.bg },
    FloatCursorLine { bg = NormalFloat.bg.li(2).sa(4).ro(-5) },

    Pmenu { bg = c.bg.li(menu.li).sa(menu.sa), fg = c.fg.li(menu.li / 2) },
    PmenuSel { bg = Pmenu.bg.li(8).sa(3) },
    PmenuKind { fg = c.bg.li(50).sa(10) },
    PmenuExtra { fg = Pmenu.fg.da(10) },
    PmenuSbar { bg = WinSeparator.fg.li(menu.li * 2) },
    PmenuThumb { bg = PmenuSbar.bg.li(20) },
    PmenuMatch { fg = c.y.ro(30).sa(-30 + menu.sa).li(10 + menu.li * 1.8) },
    ComplMatchIns { PmenuMatch },
    WildMenu { PmenuSel },

    StatusLine { bg = c.bg.li(2) },
    StatusLineNC { StatusLine },

    TabLineFill { MsgArea },
    TabLine { bg = MsgArea.bg.li(2) },
    TabLineSel { bg = c.bg },

    WinBar { MsgArea },
    WinBarNC { WinBar },

    Search { bg = c.y.ro(20).sa(-20).da(10), fg = c.fg.li(30) },
    IncSearch { bg = c.y.sa(20).ro(10).li(10), fg = c.fg.da(80) },
    CurSearch { IncSearch },
    Substitute { bg = c.b.da(50).ro(-20), fg = c.fg.li(30) },
    SnippetTabStop { bg = c.bg.mix(c.p, 60).da(40) },

    SpellBad { sp = c.r.li(30).sa(10), undercurl = true },
    SpellCap { sp = c.y.li(30).sa(10), undercurl = true },
    SpellLocal { sp = c.g.li(30).sa(10), undercurl = true },
    SpellRare { sp = c.b.li(30).sa(10), undercurl = true },

    MoreMsg { fg = c.b.sa(10).li(20), italic = true },
    Title { fg = c.b.sa(20).li(10), bold = true },
    NonText { fg = c.bg.li(15) },
    WhiteSpace { fg = c.bg.li(17).sa(-50) },
    SpecialKey { fg = c.bg.li(30).sa(15).ro(20) },
    Directory { fg = c.b.li(40).sa(30) },
    QuickFixLine { fg = c.r },

    WarningMsg { fg = c.warn },
    ErrorMsg { fg = c.err },
    Error { bg = c.err.da(65).sa(-20).ro(-35) },

    sym"@variable" { fg = c.fg },
    sym"@variable.builtin" { fg = c.fg.li(10) },
    sym"@variable.parameter" { fg = c.r },
    sym"@variable.parameter.builtin" { fg = c.r.li(10) },
    sym"@variable.member" { fg = c.fg.da(30).sa(10) },

    sym"@constant" { fg = c.fg.da(10), bold = true },
    sym"@constant.builtin" { fg = c.fg, bold = true },
    sym"@constant.macro" { fg = c.c.li(10).sa(-10) },

    sym"@module" { fg = c.y },
    sym"@module.builtin" { fg = c.y.li(10) },

    sym"@label" { fg = c.r },

    sym"@string" { fg = c.g },
    sym"@string.documentation" { fg = c.g.sa(-50).li(25).ro(20) },
    sym"@string.regexp" { fg = c.g.li(20).mix(c.y, 65) },
    sym"@string.escape" { fg = SpecialKey.fg.da(25).ro(-30) },
    sym"@string.special" { fg = c.g.mix(c.c, 75).sa(20) },
    sym"@string.special.symbol" { fg = c.fg.da(30).sa(50).mix(c.c, 50) },
    sym"@string.special.path" { fg = c.g.mix(c.y, 60).sa(10).da(15) },
    sym"@string.special.url" { sym"@string.special.symbol", sp = c.c, undercurl = true },

    sym"@character" { fg = c.fg.da(30).mix(c.y, 40) },
    sym"@character.special" { fg = sym"@character".fg.mix(c.c, 20).sa(20).li(10) },

    sym"@boolean" { fg = c.fg.mix(c.r, 50) },

    sym"@number" { fg = c.fg.mix(c.o, 50).li(10) },
    sym"@number.float" { fg = sym"@number".fg.da(15).sa(-20) },

    sym"@type" { fg = c.o },
    sym"@type.builtin" { fg = c.o.li(10) },
    sym"@type.definition" { fg = c.o.sa(20) },

    sym"@attribute" { fg = c.g },
    sym"@attribute.builtin" { fg = c.g.li(10) },
    sym"@property" { fg = c.fg.da(30) },

    sym"@function" { fg = c.b.da(15) },
    sym"@function.builtin" { fg = c.b.li(10) },
    sym"@function.call" { fg = c.b },
    sym"@function.macro" { fg = c.c },
    sym"@function.method" { fg = sym"@function".fg.mix(c.p, 50) },
    sym"@function.method.call" { fg = sym"@function.call".fg.mix(c.p, 50) },

    sym"@constructor" { fg = c.fg.da(45).sa(10) },
    sym"@operator" { fg = c.fg.da(30) },
    sym"@punctuation" { fg = c.fg.da(45) },
    sym"@punctuation.bracket" { fg = c.fg.da(35) },
    sym"@punctuation.special" { fg = sym"@punctuation".fg.mix(c.c, 50).li(10) },

    sym"@keyword" { fg = c.p },
    sym"@keyword.coroutine" { fg = c.p },
    sym"@keyword.repeat" { fg = c.p },
    sym"@keyword.return" { fg = c.p },
    sym"@keyword.debug" { fg = c.p },
    sym"@keyword.conditional" { fg = c.p },
    sym"@keyword.conditional.ternary" { fg = c.p.da(10).sa(-30) },
    sym"@keyword.directive" { fg = c.p.mix(c.c, 60).sa(10) },
    sym"@keyword.function" { fg = c.p.li(10).mix(c.b, 40) },
    sym"@keyword.import" { fg = c.p.li(10) },
    sym"@keyword.type" { fg = c.p.li(10).mix(c.o, 25) },
    sym"@keyword.directive.define" { fg = c.p.mix(c.c, 60).li(10) },
    sym"@keyword.operator" { fg = c.p.li(20) },
    sym"@keyword.exception" { fg = c.p.li(20).mix(c.r, 40) },

    sym"@comment" { fg = c.bg.li(25), italic = true },
    sym"@comment.documentation" { fg = c.bg.li(40).mix(c.c, 30) },
    sym"@comment.error" { fg = sym"@comment".fg.mix(c.err, 50) },
    sym"@comment.warn" { fg = sym"@comment".fg.mix(c.warn, 50) },
    sym"@comment.todo" { fg = sym"@comment".fg.mix(c.g, 50) },
    sym"@comment.note" { fg = sym"@comment".fg.mix(c.hint, 50) },

    sym"@markup.strong" { bold = true },
    sym"@markup.italic" { italic = true },
    sym"@markup.strikethrough" { strikethrough = true },
    sym"@markup.underline" { underline = true },

    base_heading { fg = Title.fg.sa(-30) },
    sym"@markup.heading.1" { fg = base_heading.fg, bold = true },
    sym"@markup.heading.2" { fg = base_heading.fg.da(7), bold = true },
    sym"@markup.heading.3" { fg = base_heading.fg.da(14), bold = true },
    sym"@markup.heading.4" { fg = base_heading.fg.da(21), bold = true },
    sym"@markup.heading.5" { fg = base_heading.fg.da(28), bold = true },
    sym"@markup.heading.6" { fg = base_heading.fg.da(35), bold = true },
    sym"@markup.heading" { fg = base_heading.fg },
    sym"@markup.quote" { fg = c.fg.da(45) },
    sym"@markup.math" { fg = c.y.da(10).sa(-10) },
    sym"@markup.link" { fg = c.c },
    sym"@markup.link.label" { fg = c.c },
    sym"@markup.link.url" { fg = c.c.li(10), sp = c.c.da(15), undercurl = true },
    sym"@markup.raw" { fg = c.fg.da(30) },
    sym"@markup.raw.block" { fg = c.fg.li(10) },
    sym"@markup.list" { fg = c.o.li(20) },
    sym"@markup.list.checked" { fg = c.g },
    sym"@markup.list.unchecked" { fg = c.g.mix(c.r, 60).da(10) },

    sym"@diff.plus" { fg = c.g.li(20).sa(-10) },
    sym"@diff.minus" { fg = c.r.li(20).sa(-10) },
    sym"@diff.delta" { fg = c.b.li(20).sa(-10) },

    sym"@tag" { fg = c.fg.da(45) },
    sym"@tag.builtin" { fg = c.fg.da(30) },
    sym"@tag.attribute" { fg = c.b.da(10) },
    sym"@tag.delimiter" { fg = c.fg.da(52) },

    Identifier { sym"@constant" },
    Function { sym"@function" },
    Type { sym"@type" },
    Variable { sym"@variable" },
    Statement { sym"@keyword" },
    Special { fg = c.c },
    Keyword { sym"@keyword" },
    Conditional { sym"@keyword.conditional" },
    Repeat { sym"@keyword.repeat" },
    Label { sym"@label" },
    Exception { sym"@keyword.exception" },
    PreProc { sym"@function.macro" },
    Constant { sym"@constant" },
    String { sym"@string" },
    Character { sym"@character" },
    Number { sym"@number" },
    Boolean { sym"@boolean" },
    Float { sym"@number.float" },
    Quote { sym"@string" },
    Operator { sym"@operator" },
    Delimiter { sym"@punctuation" },
    MatchParen { fg = c.fg.li(40).sa(50) },
    Todo { sym"@comment.todo" },
    Question { fg = c.b.li(10) },
    Comment { sym"@comment" },
    SpecialComment { sym"Comment" },

    DiagnosticOk { fg = c.fg.da(15) },
    DiagnosticHint { fg = c.hint },
    DiagnosticInfo { fg = c.info },
    DiagnosticWarn { fg = c.warn },
    DiagnosticError { fg = c.err },
    DiagnosticDeprecated { fg = c.y.li(10), strikethrough = true },

    DiagnosticVirtualTextOk { DiagnosticOk, bg = c.bg.mix(DiagnosticOk.fg, 15).sa(10) },
    DiagnosticVirtualTextHint { DiagnosticHint, bg = c.bg.mix(DiagnosticHint.fg, 15).sa(10) },
    DiagnosticVirtualTextInfo { DiagnosticInfo, bg = c.bg.mix(DiagnosticInfo.fg, 15).sa(10) },
    DiagnosticVirtualTextWarn { DiagnosticWarn, bg = c.bg.mix(DiagnosticWarn.fg, 15).sa(10) },
    DiagnosticVirtualTextError { DiagnosticError, bg = c.bg.mix(DiagnosticError.fg, 15).sa(10) },

    DiagnosticSignOk { fg = c.fg },
    DiagnosticSignHint { fg = c.hint.li(13) },
    DiagnosticSignInfo { fg = c.info.li(13) },
    DiagnosticSignWarn { fg = c.warn.li(13) },
    DiagnosticSignError { fg = c.err.li(13) },
    DiagnosticSignDeprecated { fg = c.y.li(25) },

    DiagnosticUnderlineOk { sp = c.fg.da(30), undercurl = true },
    DiagnosticUnderlineHint { sp = c.hint.da(15), undercurl = true },
    DiagnosticUnderlineInfo { sp = c.info.da(15), undercurl = true },
    DiagnosticUnderlineWarn { sp = c.warn.da(15), undercurl = true },
    DiagnosticUnderlineError { sp = c.err.da(15), undercurl = true },

    sym"@lsp.type.keyword" { sym"@keyword" },
    sym"@lsp.type.function" { sym"@function" },
    sym"@lsp.type.variable" { sym"@variable" },
    sym"@lsp.type.operator" { sym"@operator" },
    sym"@lsp.type.type" { sym"@type" },
    sym"@lsp.type.string" { sym"@string" },
    sym"@lsp.type.number" { sym"@number" },
    sym"@lsp.type.boolean" { sym"@boolean" },
    sym"@lsp.type.enumMember" { sym"@variable.member" },

    DiffAdd { bg = c.bg.mix(c.g, 30) },
    DiffChange { bg = c.bg.mix(c.y, 30) },
    DiffDelete { bg = c.bg.mix(c.r, 30) },
    DiffText { bg = c.bg.mix(c.b, 30) },
    Added { fg = c.g },
    Deleted { fg = c.r },
    Removed { fg = c.r },
    Changed { fg = c.y },

    sym"@attribute.css" { sym"@function" },
    sym"@markup.raw.markdown_inline" { bg = c.bg.da(30), fg = c.fg.da(30) },
    sym"@markup.raw.block.markdown" { fg = c.bg.li(20) },
    sym"@label.markdown" { fg = c.r.sa(-40).da(30) },
    sym"@list.checked.markdown" { sym"@markup.list.checked" },
    sym"@list.unchecked.markdown" { sym"@markup.list.unchecked" },

    LazyBold { bold = true },
    LazyButton { bg = c.bg.li(10), fg = c.fg },
    LazyButtonActive { bg = c.bg.li(10).mix(c.b, 30) },
    LazyComment { sym"@comment.documentation" },
    LazyCommit { fg = c.r.da(10) },
    LazyCommitIssue { fg = c.err.li(20) },
    LazyCommitScope { italic = true },
    LazyCommitType { fg = c.o },
    LazyDir { Directory },
    LazyError { DiagnosticError },
    LazyH1 { bg = c.b.da(50), fg = c.fg.li(20), bold = true },
    LazyH2 { fg = c.fg.li(10), bold = true },
    LazyInfo { DiagnosticInfo },
    LazyItalic { italic = true },
    LazyLocal { Constant },
    LazyNoCond { DiagnosticWarn },
    LazyNormal { NormalFloat },
    LazyProrgressDone { fg = c.g.li(20) },
    LazyProrgressTodo { sym"@comment.todo" },
    LazyProp { fg = c.fg.da(30) },
    LazyReasonCmd { fg = c.fg.da(30) },
    LazyReasonEvent { fg = c.g },
    LazyReasonFt { fg = c.o },
    LazyReasonImport { fg = c.p },
    LazyReasonKeys { fg = c.y.li(20) },
    LazyReasonPlugin { fg = c.y.mix(c.o, 60) },
    LazyReasonRequire { fg = c.r },
    LazyReasonRuntime { fg = c.fg },
    LazyReasonSource { fg = c.o.mix(Directory.fg, 30) },
    LazySpecial { Special },
    LazyTaskOutput { fg = MsgArea.fg },
    LazyUrl { sym"@markup.link" },
    LazyValue { fg = c.fg.li(10) },
    LazyWarning { DiagnosticWarn },

    BlinkCmpMenu { Pmenu },
    BlinkCmpMenuBorder { Pmenu, fg = WinSeparator.fg.li(menu.li * 2) },
    BlinkCmpMenuSelection { PmenuSel },
    BlinkCmpMenuScrollBarGutter { PmenuSbar },
    BlinkCmpMenuScrollBarThumb { PmenuThumb },
    BlinkCmpMenuLabel { fg = c.fg.da(30) },
    BlinkCmpLabelDeprecated { DiagnosticDeprecated },
    BlinkCmpLabelMatch { PmenuMatch },
    BlinkCmpLabelDetail { Comment },
    BlinkCmpLabelDescription { sym"@comment.documentation" },
    BlinkCmpKind { PmenuKind },
    BlinkCmpSource { fg = c.fg.da(20).sa(20) },
    BlinkCmpGhostText { fg = c.bg.li(30) },
    BlinkCmpDoc { NormalFloat },
    BlinkCmpDocBorder { FloatBorder },
    BlinkCmpDocSeparator { fg = BlinkCmpDocBorder.fg.da(20) },
    BlinkCmpDocCursorLine { bg = c.bg.li(10) },
    BlinkCmpSignatureHelp { NormalFloat },
    BlinkCmpSignatureHelpBorder { FloatBorder },
    BlinkCmpSignatureHelpActiveParameter { bg = BlinkCmpSignatureHelp.bg.li(10), sp = c.b.li(20), underline = true },

    FlashBackdrop { Comment },
    FlashMatch { Search },
    FlashCurrent { IncSearch },
    FlashLabel { bg = Search.bg.da(60), fg = c.b.li(20).sa(20) },
    FlashPrompt { fg = c.y.da(20).sa(-80) },
    FlashPromptIcon { Question },

    SnacksPickerListCursorLine { bg = NormalFloat.bg.li(10) },
    SnacksPickerFile { fg = c.fg.da(20).mix(c.b, 20) },
    SnacksPickerBold { bold = true },
    SnacksPickerItalic { italic = true },
    SnacksPickerDir { Directory },
    SnacksPickerDirectory { Directory },
    SnacksPickerIcon { fg = c.fg.mix(c.b, 60) },
    SnacksPickerLink { fg = c.c.li(20), undercurl = true },
    SnacksPickerTime { fg = c.g },
    SnacksPickerMatch { fg = c.fg.mix(c.y, 60), sp = c.fg.da(15), underline = true },
    SnacksPickerPrompt { fg = Question.fg },
    SnacksPickerRegister { fg = c.g },
    SnacksPickerSelected { fg = c.b.li(10).sa(20) },
    SnacksPickerBufFlags { fg = c.b.mix(c.y, 70).li(20).sa(10) },
    SnacksPickerBufNr { fg = c.o.li(10) },
    SnacksPickerKeymapMode { fg = c.r },
    SnacksPickerKeymapLhs { fg = c.y.da(10).sa(-50) },
    SnacksPickerKeymapRhs { fg = c.g.da(10) },
    SnacksPickerManPage { Title },
    SnacksPickerManSection { fg = c.c.da(10) },
    SnacksPickerDiagnosticCode { fg = c.r },
    SnacksPickerAuEvent { fg = c.g.da(20) },
    SnacksPickerAuGroup { fg = c.p },
    SnacksPickerAuPattern { sym"@string.regexp" },
    SnacksPickerCmd { fg = sym"@function".fg.li(10).sa(10) },
    SnacksPickerCmdBuiltin { fg = SnacksPickerCmd.fg.li(20) },
    SnacksPickerTotals { fg = NormalFloat.bg.li(20).sa(20) },

    OilHidden { fg = c.fg.da(50), italic = true },
    OilDir { Directory },
    OilDirHidden { fg = OilDir.fg.da(30).sa(-60), italic = true },
    OilSocet { fg = c.fg.da(15) },
    OilLink { fg = c.c.li(20) },
    OilLinkHidden { fg = c.c.da(15), italic = true },
    OilLinkTarget { fg = c.b.da(20).sa(-40) },
    OilLinkTargetHidden { fg = c.b.da(30).sa(-50), italic = true },
    OilFile { fg = c.fg.da(10 - win.li) },
    OilFileHidden { fg = c.fg.da(30 - win.li), italic = true },
    OilCreate { fg = c.g.li(5) },
    OilDelete { fg = c.r.li(5) },
    OilMove { fg = c.o.li(5) },
    OilCopy { fg = c.b.li(5) },
    OilChange { fg = c.y.li(5) },
    OilRestore { fg = c.p.li(5) },
    OilPurge { fg = c.r.da(20), bold = true },
    OilTrash { fg = c.fg.da(30) },
    OilTrashSourcePath { fg = c.fg.da(30).mix(Directory.fg, 50) },

    GitSignsAdd { Added },
    GitSignsChange { Changed },
    GitSignsDelete { Deleted },
    GitSignsChangedelete { GitSignsChange },
    GitSignsTopdelete { GitSignsDelete },
    GitSignsUntracked { fg = c.o },
    GitSignsAddNr { GitSignsAdd },
    GitSignsChangeNr { GitSignsChange },
    GitSignsDeleteNr { GitSignsDelete },
    GitSignsChangedeleteNr { GitSignsChangedelete },
    GitSignsTopdeleteNr { GitSignsTopdelete },
    GitSignsUntrackedNr { GitSignsUntracked },
    GitSignsAddLn { DiffAdd },
    GitSignsChangeLn { DiffChange },
    GitSignsChangedeleteLn { GitSignsChangeLn },
    GitSignsTopdeleteLn { DiffDelete },
    GitSignsUntrackedLn { bg = c.bg.mix(c.o, 30) },
    GitSignsAddCul { GitSignsAdd },
    GitSignsChangeCul { GitSignsChange },
    GitSignsDeleteCul { GitSignsDelete },
    GitSignsChangedeleteCul { GitSignsChangedelete },
    GitSignsTopdeleteCul { GitSignsTopdelete },
    GitSignsUntrackedCul { GitSignsUntracked },
    GitSignsCurrentLineBlame { NonText },

    WhichKey { fg = c.y.da(30).ro(20) },
    WhichKeyBorder { FloatBorder },
    WhichKeyDesc { fg = c.fg.li(win.li / 2 - 10) },
    WhichKeyGroup { fg = c.p, bold = true },
    WhichKeyIcon { fg = c.fg.da(30).sa(30) },
    WhichKeyIconAzure { fg = c.b.sa(30) },
    WhichKeyIconBlue { fg = c.b },
    WhichKeyIconCyan { fg = c.c },
    WhichKeyIconGreen { fg = c.g },
    WhichKeyIconGrey { fg = c.fg.da(45).sa(10) },
    WhichKeyIconOrange { fg = c.o },
    WhichKeyIconPurple { fg = c.p },
    WhichKeyIconRed { fg = c.r },
    WhichKeyIconYellow { fg = c.y },
    WhichKeyNormal { NormalFloat },
    WhichKeySeparator { fg = NormalFloat.fg.da(20).sa(10) },
    WhichKeyTitle { FloatTitle },
    WhichKeyValue { fg = c.r.da(30) },

    BufferLinePick { TabLine, fg = c.b.sa(10), bold = true, italic = true },
    BufferLinePickVisible { BufferLinePick },
    BufferLinePickSelected { TabLineSel, fg = c.b.sa(10).li(15), bold = true, italic = true },
  }
end)

lush.apply(theme)
return theme
